// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// VolumesCloneDetail volumes clone detail
// swagger:model VolumesCloneDetail
type VolumesCloneDetail struct {

	// List of cloned volumes created from the volumes-clone request
	ClonedVolumes []*ClonedVolumeDetail `json:"clonedVolumes"`

	// volumes clone
	VolumesClone *VolumesClone `json:"volumesClone,omitempty"`
}

// Validate validates this volumes clone detail
func (m *VolumesCloneDetail) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClonedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumesClone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VolumesCloneDetail) validateClonedVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.ClonedVolumes) { // not required
		return nil
	}

	for i := 0; i < len(m.ClonedVolumes); i++ {
		if swag.IsZero(m.ClonedVolumes[i]) { // not required
			continue
		}

		if m.ClonedVolumes[i] != nil {
			if err := m.ClonedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("clonedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *VolumesCloneDetail) validateVolumesClone(formats strfmt.Registry) error {

	if swag.IsZero(m.VolumesClone) { // not required
		return nil
	}

	if m.VolumesClone != nil {
		if err := m.VolumesClone.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumesClone")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *VolumesCloneDetail) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VolumesCloneDetail) UnmarshalBinary(b []byte) error {
	var res VolumesCloneDetail
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
